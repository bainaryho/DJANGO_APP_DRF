version: '3'                      #Docker Compose 파일의 버전 3

services:     #Docker Compose로 실행하고자 하는 서버스들을 정의
  lion-app:   #Django 애플리케이션을 실행하기 위한 서비스 설정
    container_name: lion-app-dc   #Docker 컨테이너의 이름을 지정
    build:    #Docker 이미지를 빌드할 때 사용되는 설정을 지정
      context: lion_app           #"lion_app" 디렉토리를 Docker 빌드 컨텍스트로 지정
      dockerfile: Dockerfile      #"Dockerfile"을 사용하여 이미지를 빌드
    image: lion-app               #빌드된 Docker 이미지의 이름 지정
    ports:    #호스트와 컨테이너의 포트를 연결
      - 8000:8000                 #8000번 포트로 들어온 요청을 컨테이너의 8000번 포트로 전달
    volumes:  #호스트와 컨테이너의 디렉토리를 연결
      - ./lion_app:/app           #"lion_app" 디렉토리를 컨테이너의 "/app" 디렉토리와 연결하고
      - "staticfiles:/var/www/html/static" #"staticfiles" 볼륨을 "/var/www/html/static" 디렉토리와 연결
    command:  #컨테이너가 시작될 때 실행할 명령을 지정
      - /start                    # "/start" 명령을 실행하도록 지정

  nginx: #실행하는 서비스 엔진엑스 컨테이너
    depends_on: #"nginx" 서비스가 실행되기 전에 "lion-app" 서비스가 먼저 실행되도록 의존성을 지정
      - lion-app
    container_name: lion-nginx-dc #해당 서비스가 실행될 Docker 컨테이너의 이름을 지정
    build:    #Nginx 이미지를 빌드할 때 사용되는 설정을 지정
      context: .                  #현재 디렉토리를 Docker 빌드 컨텍스트로 지정
      dockerfile: Dockerfile.nginx_ubt #"Dockerfile.nginx_ubt"을 사용하여 이미지를 빌드
    image: lion-nginx             #빌드된 Nginx Docker 이미지의 이름을 지정
    ports:
      - "8888:80"                 #호스트의 8888번 포트와 컨테이너의 80번 포트를 연결하여 Nginx의 웹 서버를 호스트에서 접근
    volumes:
      - "staticfiles:/var/www/html/static" #"staticfiles" 볼륨을 "/var/www/html/static" 디렉토리와 연결하여 Nginx에서 정적 파일들에 접근

volumes: #공유 볼륨을 정의
  staticfiles:

#위의 설정 파일은 "lion-app" 서비스에는 Django 애플리케이션이,
#"nginx" 서비스에는 Nginx 웹 서버가 실행되도록 정의되어 있습니다.
#Docker Compose를 사용하여 이 설정 파일을 실행하면
#Django 애플리케이션과 Nginx 웹 서버가 함께 실행되고 연결됩니다.
#Django 애플리케이션을 Nginx 웹 서버를 통해 외부로 노출시키며,
#웹 애플리케이션을 배포할 수 있습니다.